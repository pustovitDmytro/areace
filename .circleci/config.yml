defaults: &defaults
  resource_class: small
  docker:
    - image: circleci/node:16.4.2
cache-npm: &cache-npm
  keys:
    - -{{ checksum "package-lock.json" }}
cache-kodi: &cache-kodi
  keys:
    - -kodi_dist_{{ .Revision }}

parameters:
  skip-coveralls:
    type: boolean
    default: false
  skip-security:
    type: boolean
    default: false
  skip-leaks:
    type: boolean
    default: false
  skip-deploy:
    type: boolean
    default: false

aliases:
  - &set-github-read-token
    name: Set Danger Token
    command: |
            echo 'export DANGER_GITHUB_API_TOKEN=$(echo Z2hwXzFldFVxODNZTUhCa0ZQUjk0WVV1blFXZTFCVmkzajRSOEpxRQo= | base64 --decode)' >> $BASH_ENV
            source $BASH_ENV
  - &danger-pr
    name: Run danger
    command: npx danger ci -d .dangerfile.js
  - &install-kodi-checker
    name: Install kodi-addon-checker
    command: pip install kodi-addon-checker
  - &run-kodi-checker
    name: Run kodi-addon-checker
    command: kodi-addon-checker build/script.areace --branch nexus
  - &run-unit
    name: Run unit tests
    command: python3 ./test.py
  - &build
    name: Build
    command: npm run build
  - &install-npm
    name: Installing NPM Dependencies
    command: npm ci
 - &install-pip
    name: Install pip dependencies
    command: pip install -r requirements.txt 
  - &cache-modules
    key: -{{ checksum "package-lock.json" }}
    paths:
      - ~/.npm
      - node_modules
  - &cache-build
    key: -kodi_dist_{{ .Revision }}
    paths:
      - build/script.areace

version: 2.1
debug: true
jobs:
  danger-pr:
    <<: *defaults
    steps:
      - checkout
      - run: *install-npm
      - run: *set-github-read-token
      - run: *danger-pr
      
  install:
    <<: *defaults
    steps:
      - checkout
      - run: *install-npm
      - run: *build
      - run: *danger-pr
      - save_cache: *cache-modules
      - save_cache: *cache-build
  test-kodi-checker:
    resource_class: small
    docker:
      - image: cimg/python:3.12.0
    steps:
      - checkout
      - restore_cache:
          <<: *cache-kodi
      - run: *install-kodi-checker
      - run: *run-kodi-checker
  test-leaks:
    resource_class: small
    docker:
      - image: zricethezav/gitleaks:v7.6.1
    steps:
      - checkout
      - when:
          condition:
            not: << pipeline.parameters.skip-leaks >>
          steps:
            - run:
                name: Run gitleaks
                command: "gitleaks -v --path . --config-path .gitleaks.toml"
  test-unit:
    resource_class: small
    docker:
      - image: cimg/python:3.12.0
    steps:
      - checkout
      - run: *install-pip
      - run: *run-unit
  deploy:
    <<: *defaults
    steps:
      - checkout
      - when:
          condition:
            not: << pipeline.parameters.skip-deploy >>
          steps:
            - restore_cache:
                <<: *cache-npm
            - restore_cache:
                <<: *cache-kodi
            - run:
                name: Create Release
                command: if [ -z ${CIRCLE_SKIP_DEPLOY+x} ]; then npm run semantic-release;else echo 'job skipped';fi

workflows:
  version: 2
  main:
    jobs:
      - install:
          context: branches
      - test-leaks:
          requires:
            - install
      - test-kodi-checker:
          requires:
            - install
      - test-unit:
          requires:
            - install
      - deploy:
          requires:
            - install
            - test-kodi-checker
            - test-unit
          context: npm-packages
          filters:
            branches:
                only: master
  pr:
    jobs:
      - danger-pr:
          filters:
            branches:
              only: /pull\/[0-9]+/
